	.text
	.file	"add_mul_jam4!"
	.globl	"julia_add_mul_jam4!_5744"      # -- Begin function julia_add_mul_jam4!_5744
	.p2align	4, 0x90
	.type	"julia_add_mul_jam4!_5744",@function
"julia_add_mul_jam4!_5744":             # @"julia_add_mul_jam4!_5744"
	.cfi_startproc
# %bb.0:                                # %L26.lr.ph
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	24(%rbp), %r10d
	movq	16(%rbp), %rbx
	movq	(%rdi), %rax
	movq	8(%rdi), %r13
	movl	%esi, %r11d
	movq	(%rdx), %r15
	movl	%ecx, %r14d
	movq	(%r8), %r12
	movl	%r9d, %r8d
	movq	(%rbx), %rsi
	movq	32(%rbp), %rcx
	movq	(%rcx), %r9
	cmpq	$4, %r13
	jae	.LBB0_2
# %bb.1:
	xorl	%edi, %edi
	jmp	.LBB0_5
.LBB0_2:                                # %vector.ph
	movq	%r13, %rdi
	andq	$-4, %rdi
	vpbroadcastq	%r11, %ymm0
	vpbroadcastq	%r14, %ymm1
	vpbroadcastq	%r8, %ymm2
	vpbroadcastq	%r10, %ymm3
	xorl	%ecx, %ecx
	.p2align	4, 0x90
.LBB0_3:                                # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	vpmovzxdq	(%r15,%rcx,4), %ymm4    # ymm4 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
	vpmuludq	%ymm4, %ymm0, %ymm4
	vpaddq	(%rax,%rcx,8), %ymm4, %ymm4
	vpmovzxdq	(%r12,%rcx,4), %ymm5    # ymm5 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
	vpmovzxdq	(%rsi,%rcx,4), %ymm6    # ymm6 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
	vpmuludq	%ymm5, %ymm1, %ymm5
	vpmuludq	%ymm6, %ymm2, %ymm6
	vpaddq	%ymm6, %ymm5, %ymm5
	vpmovzxdq	(%r9,%rcx,4), %ymm6     # ymm6 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
	vpmuludq	%ymm6, %ymm3, %ymm6
	vpaddq	%ymm6, %ymm5, %ymm5
	vpaddq	%ymm5, %ymm4, %ymm4
	vmovdqu	%ymm4, (%rax,%rcx,8)
	addq	$4, %rcx
	cmpq	%rcx, %rdi
	jne	.LBB0_3
# %bb.4:                                # %middle.block
	cmpq	%rdi, %r13
	je	.LBB0_7
.LBB0_5:                                # %scalar.ph
	subq	%rdi, %r13
	leaq	(%rax,%rdi,8), %rax
	leaq	(%r15,%rdi,4), %r15
	leaq	(%r12,%rdi,4), %r12
	leaq	(%rsi,%rdi,4), %rsi
	leaq	(%r9,%rdi,4), %rdi
	xorl	%ebx, %ebx
	.p2align	4, 0x90
.LBB0_6:                                # %L26
                                        # =>This Inner Loop Header: Depth=1
	movl	(%r15,%rbx,4), %ecx
	imulq	%r11, %rcx
	addq	(%rax,%rbx,8), %rcx
	movl	(%r12,%rbx,4), %edx
	imulq	%r14, %rdx
	addq	%rcx, %rdx
	movl	(%rsi,%rbx,4), %ecx
	imulq	%r8, %rcx
	addq	%rdx, %rcx
	movl	(%rdi,%rbx,4), %edx
	imulq	%r10, %rdx
	addq	%rcx, %rdx
	movq	%rdx, (%rax,%rbx,8)
	incq	%rbx
	cmpq	%rbx, %r13
	jne	.LBB0_6
.LBB0_7:                                # %L71
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	vzeroupper
	retq
.Lfunc_end0:
	.size	"julia_add_mul_jam4!_5744", .Lfunc_end0-"julia_add_mul_jam4!_5744"
	.cfi_endproc
                                        # -- End function
	.type	.L_j_const1,@object             # @_j_const1
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3
.L_j_const1:
	.quad	1                               # 0x1
	.size	.L_j_const1, 8

	.section	".note.GNU-stack","",@progbits

define i32 @julia_gauss_reduct_11359({}* noundef nonnull align 16 dereferenceable(40) %0, {}* noundef nonnull align 16 dereferenceable(40) %1, i32 signext %2, i32 signext %3, i32 signext %4, i32 zeroext %5, { i64, i8, i64, i8 }* nocapture noundef nonnull readonly align 8 dereferenceable(32) %6) #0 {
top:
  %gcframe302 = alloca [4 x {}*], align 16
  %gcframe302.sub = getelementptr inbounds [4 x {}*], [4 x {}*]* %gcframe302, i64 0, i64 0
  %7 = bitcast [4 x {}*]* %gcframe302 to i8*
  call void @llvm.memset.p0i8.i32(i8* noundef nonnull align 16 dereferenceable(32) %7, i8 0, i32 32, i1 false)
  %8 = getelementptr inbounds [4 x {}*], [4 x {}*]* %gcframe302, i64 0, i64 2
  %9 = alloca { [1 x {}*], [2 x i64] }, align 8
  %thread_ptr = call i8* asm "movq %fs:0, $0", "=r"() #8
  %ppgcstack_i8 = getelementptr i8, i8* %thread_ptr, i64 -8
  %ppgcstack = bitcast i8* %ppgcstack_i8 to {}****
  %pgcstack = load {}***, {}**** %ppgcstack, align 8
  %10 = bitcast [4 x {}*]* %gcframe302 to i64*
  store i64 8, i64* %10, align 16
  %11 = getelementptr inbounds [4 x {}*], [4 x {}*]* %gcframe302, i64 0, i64 1
  %12 = bitcast {}** %11 to {}***
  %13 = load {}**, {}*** %pgcstack, align 8
  store {}** %13, {}*** %12, align 8
  %14 = bitcast {}*** %pgcstack to {}***
  store {}** %gcframe302.sub, {}*** %14, align 8
  %15 = sext i32 %3 to i64
  %16 = icmp sgt i64 %15, 0
  %. = select i1 %16, i64 %15, i64 0
  %.fca.0.0.gep = getelementptr inbounds { [1 x {}*], [2 x i64] }, { [1 x {}*], [2 x i64] }* %9, i64 0, i32 0, i64 0
  store {}* %0, {}** %8, align 16
  store {}* %0, {}** %.fca.0.0.gep, align 8
  %.fca.1.0.gep = getelementptr inbounds { [1 x {}*], [2 x i64] }, { [1 x {}*], [2 x i64] }* %9, i64 0, i32 1, i64 0
  store i64 1, i64* %.fca.1.0.gep, align 8
  %.fca.1.1.gep = getelementptr inbounds { [1 x {}*], [2 x i64] }, { [1 x {}*], [2 x i64] }* %9, i64 0, i32 1, i64 1
  store i64 %., i64* %.fca.1.1.gep, align 8
  %17 = call nonnull {}* @j_collect_11361({ [1 x {}*], [2 x i64] }* nocapture readonly %9) #0
  %18 = sext i32 %2 to i64
  %19 = add nsw i64 %18, -1
  %20 = icmp slt i32 %2, 2
  %value_phi1 = select i1 %20, i64 0, i64 %19
  %21 = icmp slt i64 %value_phi1, 1
  br i1 %21, label %L302, label %L32.preheader

L32.preheader:                                    ; preds = %top
  %22 = bitcast {}* %17 to i64**
  %23 = getelementptr inbounds { i64, i8, i64, i8 }, { i64, i8, i64, i8 }* %6, i64 0, i32 0
  %24 = load i64, i64* %23, align 8
  %25 = zext i64 %24 to i128
  %26 = getelementptr inbounds { i64, i8, i64, i8 }, { i64, i8, i64, i8 }* %6, i64 0, i32 3
  %27 = load i8, i8* %26, align 8
  %.not73 = icmp eq i8 %27, 0
  %28 = getelementptr inbounds { i64, i8, i64, i8 }, { i64, i8, i64, i8 }* %6, i64 0, i32 1
  %29 = load i8, i8* %28, align 8
  %30 = icmp ugt i8 %29, 63
  %31 = xor i1 %30, true
  %32 = zext i8 %29 to i64
  %33 = getelementptr inbounds { i64, i8, i64, i8 }, { i64, i8, i64, i8 }* %6, i64 0, i32 2
  %34 = load i64, i64* %33, align 8
  %35 = bitcast {}* %1 to {}***
  %36 = zext i32 %5 to i64
  %37 = bitcast {}* %17 to { i8*, i64, i16, i16, i32 }*
  %38 = getelementptr inbounds { i8*, i64, i16, i16, i32 }, { i8*, i64, i16, i16, i32 }* %37, i64 0, i32 1
  br label %L32

L32:                                              ; preds = %L222, %L32.preheader
  %value_phi5 = phi i64 [ %117, %L222 ], [ 1, %L32.preheader ]
  %value_phi7 = phi i32 [ %value_phi40, %L222 ], [ -1, %L32.preheader ]
  %value_phi8 = phi i32 [ %value_phi41, %L222 ], [ 0, %L32.preheader ]
  %.not = icmp eq i32 %value_phi7, -1
  br i1 %.not, label %L41, label %L235

L41:                                              ; preds = %L32
  %39 = load i64*, i64** %22, align 8
  %40 = getelementptr inbounds i64, i64* %39, i64 %value_phi5
  %41 = load i64, i64* %40, align 8
  %42 = zext i64 %41 to i128
  %43 = mul nuw i128 %25, %42
  %44 = lshr i128 %43, 64
  %45 = trunc i128 %44 to i64
  %46 = sub i64 %41, %45
  %47 = lshr i64 %46, 1
  %48 = select i1 %.not73, i64 0, i64 %47
  %49 = add i64 %48, %45
  call void @llvm.assume(i1 %31)
  %50 = lshr i64 %49, %32
  %51 = mul i64 %50, %34
  %52 = sub i64 %41, %51
  store i64 %52, i64* %40, align 8
  %.not74 = icmp eq i64 %52, 0
  br i1 %.not74, label %L222, label %L77

L77:                                              ; preds = %L41
  %53 = add nsw i64 %value_phi5, -1
  %54 = load {}**, {}*** %35, align 8
  %55 = getelementptr inbounds {}*, {}** %54, i64 %53
  %56 = load {}*, {}** %55, align 8
  %.not76 = icmp eq {}* %56, null
  br i1 %.not76, label %fail, label %pass

L132:                                             ; preds = %scalar.ph150, %L132
  %value_phi4994 = phi i64 [ %bc.resume.val156, %scalar.ph150 ], [ %64, %L132 ]
  %57 = getelementptr inbounds i64, i64* %316, i64 %value_phi4994
  %58 = load i64, i64* %57, align 8
  %59 = getelementptr inbounds i32, i32* %319, i64 %value_phi4994
  %60 = load i32, i32* %59, align 4
  %61 = zext i32 %60 to i64
  %62 = mul nuw i64 %317, %61
  %63 = add i64 %62, %58
  store i64 %63, i64* %57, align 8
  %64 = add nuw nsw i64 %value_phi4994, 1
  %exitcond.not = icmp eq i64 %64, %315
  br i1 %exitcond.not, label %L155, label %L132

L155:                                             ; preds = %middle.block149, %L132
  %65 = getelementptr inbounds i64, i64* %316, i64 %value_phi5
  store i64 %317, i64* %65, align 8
  %.not83 = icmp slt i32 %value_phi8, %4
  br i1 %.not83, label %L160, label %L173.lr.ph

L155.thread110:                                   ; preds = %pass48
  %66 = and i64 %311, 4294967295
  %67 = load i64*, i64** %22, align 8
  %68 = getelementptr inbounds i64, i64* %67, i64 %value_phi5
  store i64 %66, i64* %68, align 8
  %.not83111 = icmp slt i32 %value_phi8, %4
  br i1 %.not83111, label %L160, label %L222

L160:                                             ; preds = %L155.thread110, %L155
  %69 = add nsw i32 %value_phi8, 1
  br label %L222

L173.lr.ph:                                       ; preds = %L155
  br i1 %.not73, label %L173.lr.ph.split.us, label %L173.lr.ph.L173.lr.ph.split_crit_edge

L173.lr.ph.L173.lr.ph.split_crit_edge:            ; preds = %L173.lr.ph
  br i1 %30, label %L222, label %L173.preheader

L173.preheader:                                   ; preds = %L173.lr.ph.L173.lr.ph.split_crit_edge
  %min.iters.check134 = icmp ult i64 %315, 4
  br i1 %min.iters.check134, label %scalar.ph132, label %vector.ph135

vector.ph135:                                     ; preds = %L173.preheader
  %n.vec137 = and i64 %315, 9223372036854775804
  %broadcast.splatinsert142 = insertelement <4 x i128> poison, i128 %25, i64 0
  %broadcast.splat143 = shufflevector <4 x i128> %broadcast.splatinsert142, <4 x i128> poison, <4 x i32> zeroinitializer
  %broadcast.splatinsert144 = insertelement <4 x i64> poison, i64 %32, i64 0
  %broadcast.splat145 = shufflevector <4 x i64> %broadcast.splatinsert144, <4 x i64> poison, <4 x i32> zeroinitializer
  %broadcast.splatinsert146 = insertelement <4 x i64> poison, i64 %34, i64 0
  %broadcast.splat147 = shufflevector <4 x i64> %broadcast.splatinsert146, <4 x i64> poison, <4 x i32> zeroinitializer
  br label %vector.body133

vector.body133:                                   ; preds = %vector.body133, %vector.ph135
  %index140 = phi i64 [ 0, %vector.ph135 ], [ %index.next148, %vector.body133 ]
  %70 = getelementptr inbounds i64, i64* %316, i64 %index140
  %71 = bitcast i64* %70 to <4 x i64>*
  %wide.load141 = load <4 x i64>, <4 x i64>* %71, align 8
  %72 = zext <4 x i64> %wide.load141 to <4 x i128>
  %73 = mul nuw <4 x i128> %broadcast.splat143, %72
  %74 = lshr <4 x i128> %73, <i128 64, i128 64, i128 64, i128 64>
  %75 = trunc <4 x i128> %74 to <4 x i64>
  %76 = sub <4 x i64> %wide.load141, %75
  %77 = lshr <4 x i64> %76, <i64 1, i64 1, i64 1, i64 1>
  %78 = add <4 x i64> %77, %75
  %79 = lshr <4 x i64> %78, %broadcast.splat145
  %80 = mul <4 x i64> %79, %broadcast.splat147
  %81 = sub <4 x i64> %wide.load141, %80
  store <4 x i64> %81, <4 x i64>* %71, align 8
  %index.next148 = add nuw i64 %index140, 4
  %82 = icmp eq i64 %index.next148, %n.vec137
  br i1 %82, label %middle.block131, label %vector.body133

middle.block131:                                  ; preds = %vector.body133
  %cmp.n139 = icmp eq i64 %315, %n.vec137
  br i1 %cmp.n139, label %L222, label %scalar.ph132

scalar.ph132:                                     ; preds = %middle.block131, %L173.preheader
  %bc.resume.val138 = phi i64 [ %n.vec137, %middle.block131 ], [ 0, %L173.preheader ]
  br label %L173

L173.lr.ph.split.us:                              ; preds = %L173.lr.ph
  br i1 %30, label %L222, label %L173.us.preheader

L173.us.preheader:                                ; preds = %L173.lr.ph.split.us
  %min.iters.check = icmp ult i64 %315, 4
  br i1 %min.iters.check, label %scalar.ph, label %vector.ph

vector.ph:                                        ; preds = %L173.us.preheader
  %n.vec = and i64 %315, 9223372036854775804
  %broadcast.splatinsert = insertelement <4 x i128> poison, i128 %25, i64 0
  %broadcast.splat = shufflevector <4 x i128> %broadcast.splatinsert, <4 x i128> poison, <4 x i32> zeroinitializer
  %broadcast.splatinsert127 = insertelement <4 x i64> poison, i64 %32, i64 0
  %broadcast.splat128 = shufflevector <4 x i64> %broadcast.splatinsert127, <4 x i64> poison, <4 x i32> zeroinitializer
  %broadcast.splatinsert129 = insertelement <4 x i64> poison, i64 %34, i64 0
  %broadcast.splat130 = shufflevector <4 x i64> %broadcast.splatinsert129, <4 x i64> poison, <4 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %83 = getelementptr inbounds i64, i64* %316, i64 %index
  %84 = bitcast i64* %83 to <4 x i64>*
  %wide.load = load <4 x i64>, <4 x i64>* %84, align 8
  %85 = zext <4 x i64> %wide.load to <4 x i128>
  %86 = mul nuw <4 x i128> %broadcast.splat, %85
  %87 = lshr <4 x i128> %86, <i128 64, i128 64, i128 64, i128 64>
  %88 = trunc <4 x i128> %87 to <4 x i64>
  %89 = lshr <4 x i64> %88, %broadcast.splat128
  %90 = mul <4 x i64> %89, %broadcast.splat130
  %91 = sub <4 x i64> %wide.load, %90
  store <4 x i64> %91, <4 x i64>* %84, align 8
  %index.next = add nuw i64 %index, 4
  %92 = icmp eq i64 %index.next, %n.vec
  br i1 %92, label %middle.block, label %vector.body

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %315, %n.vec
  br i1 %cmp.n, label %L222, label %scalar.ph

scalar.ph:                                        ; preds = %middle.block, %L173.us.preheader
  %bc.resume.val = phi i64 [ %n.vec, %middle.block ], [ 0, %L173.us.preheader ]
  br label %L173.us

L173.us:                                          ; preds = %L173.us, %scalar.ph
  %value_phi5196.us = phi i64 [ %102, %L173.us ], [ %bc.resume.val, %scalar.ph ]
  %93 = getelementptr inbounds i64, i64* %316, i64 %value_phi5196.us
  %94 = load i64, i64* %93, align 8
  %95 = zext i64 %94 to i128
  %96 = mul nuw i128 %25, %95
  %97 = lshr i128 %96, 64
  %98 = trunc i128 %97 to i64
  %99 = lshr i64 %98, %32
  %100 = mul i64 %99, %34
  %101 = sub i64 %94, %100
  store i64 %101, i64* %93, align 8
  %102 = add nuw nsw i64 %value_phi5196.us, 1
  %exitcond105.not = icmp eq i64 %102, %315
  br i1 %exitcond105.not, label %L222, label %L173.us

L173:                                             ; preds = %L173, %scalar.ph132
  %value_phi5196 = phi i64 [ %115, %L173 ], [ %bc.resume.val138, %scalar.ph132 ]
  %103 = getelementptr inbounds i64, i64* %316, i64 %value_phi5196
  %104 = load i64, i64* %103, align 8
  %105 = zext i64 %104 to i128
  %106 = mul nuw i128 %25, %105
  %107 = lshr i128 %106, 64
  %108 = trunc i128 %107 to i64
  %109 = sub i64 %104, %108
  %110 = lshr i64 %109, 1
  %111 = add i64 %110, %108
  %112 = lshr i64 %111, %32
  %113 = mul i64 %112, %34
  %114 = sub i64 %104, %113
  store i64 %114, i64* %103, align 8
  %115 = add nuw nsw i64 %value_phi5196, 1
  %exitcond104.not = icmp eq i64 %115, %315
  br i1 %exitcond104.not, label %L222, label %L173

L221:                                             ; preds = %pass
  %116 = trunc i64 %value_phi5 to i32
  br label %L222

L222:                                             ; preds = %L221, %L173, %L173.us, %middle.block, %L173.lr.ph.split.us, %middle.block131, %L173.lr.ph.L173.lr.ph.split_crit_edge, %L160, %L155.thread110, %L41
  %value_phi40 = phi i32 [ %116, %L221 ], [ -1, %L41 ], [ -1, %L160 ], [ -1, %L155.thread110 ], [ -1, %L173.lr.ph.split.us ], [ -1, %L173.us ], [ -1, %middle.block ], [ -1, %L173.lr.ph.L173.lr.ph.split_crit_edge ], [ -1, %L173 ], [ -1, %middle.block131 ]
  %value_phi41 = phi i32 [ %value_phi8, %L221 ], [ %value_phi8, %L41 ], [ %69, %L160 ], [ 0, %L155.thread110 ], [ 0, %L173.lr.ph.split.us ], [ 0, %L173.us ], [ 0, %middle.block ], [ 0, %L173.lr.ph.L173.lr.ph.split_crit_edge ], [ 0, %L173 ], [ 0, %middle.block131 ]
  %.not75 = icmp eq i64 %value_phi5, %value_phi1
  %117 = add nuw nsw i64 %value_phi5, 1
  br i1 %.not75, label %L235, label %L32

L235:                                             ; preds = %L222, %L32
  %value_phi9 = phi i32 [ %value_phi7, %L32 ], [ %value_phi40, %L222 ]
  %value_phi10 = phi i32 [ %value_phi8, %L32 ], [ %value_phi41, %L222 ]
  %118 = icmp slt i32 %value_phi10, 1
  br i1 %118, label %L302, label %L240

L240:                                             ; preds = %L235
  %119 = icmp sgt i32 %3, 0
  %narrow = select i1 %119, i32 %3, i32 0
  %.53 = zext i32 %narrow to i64
  br i1 %119, label %L258.preheader, label %L337

L258.preheader:                                   ; preds = %L240
  %120 = load i64*, i64** %22, align 8
  call void @llvm.assume(i1 %31)
  %121 = bitcast {}* %0 to i32**
  %122 = load i32*, i32** %121, align 8
  br i1 %.not73, label %L258.preheader.split.us, label %L258.preheader.L258.preheader.split_crit_edge

L258.preheader.L258.preheader.split_crit_edge:    ; preds = %L258.preheader
  br i1 %30, label %L258.us97.preheader, label %L258.preheader121

L258.preheader121:                                ; preds = %L258.preheader.L258.preheader.split_crit_edge
  %min.iters.check182 = icmp ult i32 %narrow, 4
  br i1 %min.iters.check182, label %scalar.ph180, label %vector.memcheck

vector.memcheck:                                  ; preds = %L258.preheader121
  %scevgep = getelementptr i32, i32* %122, i64 %.53
  %scevgep177 = getelementptr i64, i64* %120, i64 %.53
  %123 = bitcast i64* %scevgep177 to i32*
  %bound0 = icmp ult i32* %122, %123
  %124 = bitcast i32* %scevgep to i64*
  %bound1 = icmp ult i64* %120, %124
  %found.conflict = and i1 %bound0, %bound1
  br i1 %found.conflict, label %scalar.ph180, label %vector.ph183

vector.ph183:                                     ; preds = %vector.memcheck
  %n.vec185 = and i64 %.53, 2147483644
  %ind.end = or i64 %n.vec185, 1
  %broadcast.splatinsert190 = insertelement <4 x i128> poison, i128 %25, i64 0
  %broadcast.splat191 = shufflevector <4 x i128> %broadcast.splatinsert190, <4 x i128> poison, <4 x i32> zeroinitializer
  %broadcast.splatinsert192 = insertelement <4 x i64> poison, i64 %32, i64 0
  %broadcast.splat193 = shufflevector <4 x i64> %broadcast.splatinsert192, <4 x i64> poison, <4 x i32> zeroinitializer
  %broadcast.splatinsert194 = insertelement <4 x i64> poison, i64 %34, i64 0
  %broadcast.splat195 = shufflevector <4 x i64> %broadcast.splatinsert194, <4 x i64> poison, <4 x i32> zeroinitializer
  br label %vector.body181

vector.body181:                                   ; preds = %vector.body181, %vector.ph183
  %index188 = phi i64 [ 0, %vector.ph183 ], [ %index.next196, %vector.body181 ]
  %125 = getelementptr inbounds i64, i64* %120, i64 %index188
  %126 = bitcast i64* %125 to <4 x i64>*
  %wide.load189 = load <4 x i64>, <4 x i64>* %126, align 8
  %127 = zext <4 x i64> %wide.load189 to <4 x i128>
  %128 = mul nuw <4 x i128> %broadcast.splat191, %127
  %129 = lshr <4 x i128> %128, <i128 64, i128 64, i128 64, i128 64>
  %130 = trunc <4 x i128> %129 to <4 x i64>
  %131 = sub <4 x i64> %wide.load189, %130
  %132 = lshr <4 x i64> %131, <i64 1, i64 1, i64 1, i64 1>
  %133 = add <4 x i64> %132, %130
  %134 = lshr <4 x i64> %133, %broadcast.splat193
  %135 = mul <4 x i64> %134, %broadcast.splat195
  %136 = sub <4 x i64> %wide.load189, %135
  %137 = trunc <4 x i64> %136 to <4 x i32>
  %138 = getelementptr inbounds i32, i32* %122, i64 %index188
  %139 = bitcast i32* %138 to <4 x i32>*
  store <4 x i32> %137, <4 x i32>* %139, align 4
  %index.next196 = add nuw i64 %index188, 4
  %140 = icmp eq i64 %index.next196, %n.vec185
  br i1 %140, label %middle.block179, label %vector.body181

middle.block179:                                  ; preds = %vector.body181
  %cmp.n187 = icmp eq i64 %n.vec185, %.53
  br i1 %cmp.n187, label %L337, label %scalar.ph180

scalar.ph180:                                     ; preds = %middle.block179, %vector.memcheck, %L258.preheader121
  %bc.resume.val186 = phi i64 [ %ind.end, %middle.block179 ], [ 1, %L258.preheader121 ], [ 1, %vector.memcheck ]
  br label %L258

L258.us97.preheader:                              ; preds = %L258.preheader.L258.preheader.split_crit_edge
  %min.iters.check208 = icmp ult i32 %narrow, 16
  br i1 %min.iters.check208, label %scalar.ph206, label %vector.memcheck197

vector.memcheck197:                               ; preds = %L258.us97.preheader
  %scevgep198 = getelementptr i32, i32* %122, i64 %.53
  %scevgep200 = getelementptr i64, i64* %120, i64 %.53
  %141 = bitcast i64* %scevgep200 to i32*
  %bound0202 = icmp ult i32* %122, %141
  %142 = bitcast i32* %scevgep198 to i64*
  %bound1203 = icmp ult i64* %120, %142
  %found.conflict204 = and i1 %bound0202, %bound1203
  br i1 %found.conflict204, label %scalar.ph206, label %vector.ph209

vector.ph209:                                     ; preds = %vector.memcheck197
  %n.vec211 = and i64 %.53, 2147483632
  %ind.end213 = or i64 %n.vec211, 1
  br label %vector.body207

vector.body207:                                   ; preds = %vector.body207, %vector.ph209
  %index215 = phi i64 [ 0, %vector.ph209 ], [ %index.next221, %vector.body207 ]
  %143 = getelementptr inbounds i64, i64* %120, i64 %index215
  %144 = bitcast i64* %143 to <4 x i64>*
  %wide.load217 = load <4 x i64>, <4 x i64>* %144, align 8
  %145 = getelementptr inbounds i64, i64* %143, i64 4
  %146 = bitcast i64* %145 to <4 x i64>*
  %wide.load218 = load <4 x i64>, <4 x i64>* %146, align 8
  %147 = getelementptr inbounds i64, i64* %143, i64 8
  %148 = bitcast i64* %147 to <4 x i64>*
  %wide.load219 = load <4 x i64>, <4 x i64>* %148, align 8
  %149 = getelementptr inbounds i64, i64* %143, i64 12
  %150 = bitcast i64* %149 to <4 x i64>*
  %wide.load220 = load <4 x i64>, <4 x i64>* %150, align 8
  %151 = trunc <4 x i64> %wide.load217 to <4 x i32>
  %152 = trunc <4 x i64> %wide.load218 to <4 x i32>
  %153 = trunc <4 x i64> %wide.load219 to <4 x i32>
  %154 = trunc <4 x i64> %wide.load220 to <4 x i32>
  %155 = getelementptr inbounds i32, i32* %122, i64 %index215
  %156 = bitcast i32* %155 to <4 x i32>*
  store <4 x i32> %151, <4 x i32>* %156, align 4
  %157 = getelementptr inbounds i32, i32* %155, i64 4
  %158 = bitcast i32* %157 to <4 x i32>*
  store <4 x i32> %152, <4 x i32>* %158, align 4
  %159 = getelementptr inbounds i32, i32* %155, i64 8
  %160 = bitcast i32* %159 to <4 x i32>*
  store <4 x i32> %153, <4 x i32>* %160, align 4
  %161 = getelementptr inbounds i32, i32* %155, i64 12
  %162 = bitcast i32* %161 to <4 x i32>*
  store <4 x i32> %154, <4 x i32>* %162, align 4
  %index.next221 = add nuw i64 %index215, 16
  %163 = icmp eq i64 %index.next221, %n.vec211
  br i1 %163, label %middle.block205, label %vector.body207

middle.block205:                                  ; preds = %vector.body207
  %cmp.n214 = icmp eq i64 %n.vec211, %.53
  br i1 %cmp.n214, label %L337, label %scalar.ph206

scalar.ph206:                                     ; preds = %middle.block205, %vector.memcheck197, %L258.us97.preheader
  %bc.resume.val212 = phi i64 [ %ind.end213, %middle.block205 ], [ 1, %L258.us97.preheader ], [ 1, %vector.memcheck197 ]
  br label %L258.us97

L258.preheader.split.us:                          ; preds = %L258.preheader
  br i1 %30, label %L258.us.us.preheader, label %L258.us.preheader

L258.us.preheader:                                ; preds = %L258.preheader.split.us
  %min.iters.check233 = icmp ult i32 %narrow, 4
  br i1 %min.iters.check233, label %scalar.ph231, label %vector.memcheck222

vector.memcheck222:                               ; preds = %L258.us.preheader
  %scevgep223 = getelementptr i32, i32* %122, i64 %.53
  %scevgep225 = getelementptr i64, i64* %120, i64 %.53
  %164 = bitcast i64* %scevgep225 to i32*
  %bound0227 = icmp ult i32* %122, %164
  %165 = bitcast i32* %scevgep223 to i64*
  %bound1228 = icmp ult i64* %120, %165
  %found.conflict229 = and i1 %bound0227, %bound1228
  br i1 %found.conflict229, label %scalar.ph231, label %vector.ph234

vector.ph234:                                     ; preds = %vector.memcheck222
  %n.vec236 = and i64 %.53, 2147483644
  %ind.end238 = or i64 %n.vec236, 1
  %broadcast.splatinsert243 = insertelement <4 x i128> poison, i128 %25, i64 0
  %broadcast.splat244 = shufflevector <4 x i128> %broadcast.splatinsert243, <4 x i128> poison, <4 x i32> zeroinitializer
  %broadcast.splatinsert245 = insertelement <4 x i64> poison, i64 %32, i64 0
  %broadcast.splat246 = shufflevector <4 x i64> %broadcast.splatinsert245, <4 x i64> poison, <4 x i32> zeroinitializer
  %broadcast.splatinsert247 = insertelement <4 x i64> poison, i64 %34, i64 0
  %broadcast.splat248 = shufflevector <4 x i64> %broadcast.splatinsert247, <4 x i64> poison, <4 x i32> zeroinitializer
  br label %vector.body232

vector.body232:                                   ; preds = %vector.body232, %vector.ph234
  %index240 = phi i64 [ 0, %vector.ph234 ], [ %index.next249, %vector.body232 ]
  %166 = getelementptr inbounds i64, i64* %120, i64 %index240
  %167 = bitcast i64* %166 to <4 x i64>*
  %wide.load242 = load <4 x i64>, <4 x i64>* %167, align 8
  %168 = zext <4 x i64> %wide.load242 to <4 x i128>
  %169 = mul nuw <4 x i128> %broadcast.splat244, %168
  %170 = lshr <4 x i128> %169, <i128 64, i128 64, i128 64, i128 64>
  %171 = trunc <4 x i128> %170 to <4 x i64>
  %172 = lshr <4 x i64> %171, %broadcast.splat246
  %173 = mul <4 x i64> %172, %broadcast.splat248
  %174 = sub <4 x i64> %wide.load242, %173
  %175 = trunc <4 x i64> %174 to <4 x i32>
  %176 = getelementptr inbounds i32, i32* %122, i64 %index240
  %177 = bitcast i32* %176 to <4 x i32>*
  store <4 x i32> %175, <4 x i32>* %177, align 4
  %index.next249 = add nuw i64 %index240, 4
  %178 = icmp eq i64 %index.next249, %n.vec236
  br i1 %178, label %middle.block230, label %vector.body232

middle.block230:                                  ; preds = %vector.body232
  %cmp.n239 = icmp eq i64 %n.vec236, %.53
  br i1 %cmp.n239, label %L337, label %scalar.ph231

scalar.ph231:                                     ; preds = %middle.block230, %vector.memcheck222, %L258.us.preheader
  %bc.resume.val237 = phi i64 [ %ind.end238, %middle.block230 ], [ 1, %L258.us.preheader ], [ 1, %vector.memcheck222 ]
  br label %L258.us

L258.us.us.preheader:                             ; preds = %L258.preheader.split.us
  %min.iters.check261 = icmp ult i32 %narrow, 16
  br i1 %min.iters.check261, label %scalar.ph259, label %vector.memcheck250

vector.memcheck250:                               ; preds = %L258.us.us.preheader
  %scevgep251 = getelementptr i32, i32* %122, i64 %.53
  %scevgep253 = getelementptr i64, i64* %120, i64 %.53
  %179 = bitcast i64* %scevgep253 to i32*
  %bound0255 = icmp ult i32* %122, %179
  %180 = bitcast i32* %scevgep251 to i64*
  %bound1256 = icmp ult i64* %120, %180
  %found.conflict257 = and i1 %bound0255, %bound1256
  br i1 %found.conflict257, label %scalar.ph259, label %vector.ph262

vector.ph262:                                     ; preds = %vector.memcheck250
  %n.vec264 = and i64 %.53, 2147483632
  %ind.end266 = or i64 %n.vec264, 1
  br label %vector.body260

vector.body260:                                   ; preds = %vector.body260, %vector.ph262
  %index268 = phi i64 [ 0, %vector.ph262 ], [ %index.next274, %vector.body260 ]
  %181 = getelementptr inbounds i64, i64* %120, i64 %index268
  %182 = bitcast i64* %181 to <4 x i64>*
  %wide.load270 = load <4 x i64>, <4 x i64>* %182, align 8
  %183 = getelementptr inbounds i64, i64* %181, i64 4
  %184 = bitcast i64* %183 to <4 x i64>*
  %wide.load271 = load <4 x i64>, <4 x i64>* %184, align 8
  %185 = getelementptr inbounds i64, i64* %181, i64 8
  %186 = bitcast i64* %185 to <4 x i64>*
  %wide.load272 = load <4 x i64>, <4 x i64>* %186, align 8
  %187 = getelementptr inbounds i64, i64* %181, i64 12
  %188 = bitcast i64* %187 to <4 x i64>*
  %wide.load273 = load <4 x i64>, <4 x i64>* %188, align 8
  %189 = trunc <4 x i64> %wide.load270 to <4 x i32>
  %190 = trunc <4 x i64> %wide.load271 to <4 x i32>
  %191 = trunc <4 x i64> %wide.load272 to <4 x i32>
  %192 = trunc <4 x i64> %wide.load273 to <4 x i32>
  %193 = getelementptr inbounds i32, i32* %122, i64 %index268
  %194 = bitcast i32* %193 to <4 x i32>*
  store <4 x i32> %189, <4 x i32>* %194, align 4
  %195 = getelementptr inbounds i32, i32* %193, i64 4
  %196 = bitcast i32* %195 to <4 x i32>*
  store <4 x i32> %190, <4 x i32>* %196, align 4
  %197 = getelementptr inbounds i32, i32* %193, i64 8
  %198 = bitcast i32* %197 to <4 x i32>*
  store <4 x i32> %191, <4 x i32>* %198, align 4
  %199 = getelementptr inbounds i32, i32* %193, i64 12
  %200 = bitcast i32* %199 to <4 x i32>*
  store <4 x i32> %192, <4 x i32>* %200, align 4
  %index.next274 = add nuw i64 %index268, 16
  %201 = icmp eq i64 %index.next274, %n.vec264
  br i1 %201, label %middle.block258, label %vector.body260

middle.block258:                                  ; preds = %vector.body260
  %cmp.n267 = icmp eq i64 %n.vec264, %.53
  br i1 %cmp.n267, label %L337, label %scalar.ph259

scalar.ph259:                                     ; preds = %middle.block258, %vector.memcheck250, %L258.us.us.preheader
  %bc.resume.val265 = phi i64 [ %ind.end266, %middle.block258 ], [ 1, %L258.us.us.preheader ], [ 1, %vector.memcheck250 ]
  br label %L258.us.us

L258.us.us:                                       ; preds = %L258.us.us, %scalar.ph259
  %value_phi15.us.us = phi i64 [ %207, %L258.us.us ], [ %bc.resume.val265, %scalar.ph259 ]
  %202 = add nsw i64 %value_phi15.us.us, -1
  %203 = getelementptr inbounds i64, i64* %120, i64 %202
  %204 = load i64, i64* %203, align 8
  %205 = trunc i64 %204 to i32
  %206 = getelementptr inbounds i32, i32* %122, i64 %202
  store i32 %205, i32* %206, align 4
  %.not63.not.us.us = icmp eq i64 %value_phi15.us.us, %.53
  %207 = add nuw nsw i64 %value_phi15.us.us, 1
  br i1 %.not63.not.us.us, label %L337, label %L258.us.us

L258.us:                                          ; preds = %L258.us, %scalar.ph231
  %value_phi15.us = phi i64 [ %220, %L258.us ], [ %bc.resume.val237, %scalar.ph231 ]
  %208 = add nsw i64 %value_phi15.us, -1
  %209 = getelementptr inbounds i64, i64* %120, i64 %208
  %210 = load i64, i64* %209, align 8
  %211 = zext i64 %210 to i128
  %212 = mul nuw i128 %25, %211
  %213 = lshr i128 %212, 64
  %214 = trunc i128 %213 to i64
  %215 = lshr i64 %214, %32
  %216 = mul i64 %215, %34
  %217 = sub i64 %210, %216
  %218 = trunc i64 %217 to i32
  %219 = getelementptr inbounds i32, i32* %122, i64 %208
  store i32 %218, i32* %219, align 4
  %.not63.not.us = icmp eq i64 %value_phi15.us, %.53
  %220 = add nuw nsw i64 %value_phi15.us, 1
  br i1 %.not63.not.us, label %L337, label %L258.us

L258.us97:                                        ; preds = %L258.us97, %scalar.ph206
  %value_phi15.us98 = phi i64 [ %226, %L258.us97 ], [ %bc.resume.val212, %scalar.ph206 ]
  %221 = add nsw i64 %value_phi15.us98, -1
  %222 = getelementptr inbounds i64, i64* %120, i64 %221
  %223 = load i64, i64* %222, align 8
  %224 = trunc i64 %223 to i32
  %225 = getelementptr inbounds i32, i32* %122, i64 %221
  store i32 %224, i32* %225, align 4
  %.not63.not.us99 = icmp eq i64 %value_phi15.us98, %.53
  %226 = add nuw nsw i64 %value_phi15.us98, 1
  br i1 %.not63.not.us99, label %L337, label %L258.us97

L258:                                             ; preds = %L258, %scalar.ph180
  %value_phi15 = phi i64 [ %242, %L258 ], [ %bc.resume.val186, %scalar.ph180 ]
  %227 = add nsw i64 %value_phi15, -1
  %228 = getelementptr inbounds i64, i64* %120, i64 %227
  %229 = load i64, i64* %228, align 8
  %230 = zext i64 %229 to i128
  %231 = mul nuw i128 %25, %230
  %232 = lshr i128 %231, 64
  %233 = trunc i128 %232 to i64
  %234 = sub i64 %229, %233
  %235 = lshr i64 %234, 1
  %236 = add i64 %235, %233
  %237 = lshr i64 %236, %32
  %238 = mul i64 %237, %34
  %239 = sub i64 %229, %238
  %240 = trunc i64 %239 to i32
  %241 = getelementptr inbounds i32, i32* %122, i64 %227
  store i32 %240, i32* %241, align 4
  %.not63.not = icmp eq i64 %value_phi15, %.53
  %242 = add nuw nsw i64 %value_phi15, 1
  br i1 %.not63.not, label %L337, label %L258

L302:                                             ; preds = %L235, %top
  %value_phi990 = phi i32 [ %value_phi9, %L235 ], [ -1, %top ]
  %243 = icmp sgt i32 %3, 0
  %narrow71 = select i1 %243, i32 %3, i32 0
  %.54 = zext i32 %narrow71 to i64
  br i1 %243, label %L320.preheader, label %L337

L320.preheader:                                   ; preds = %L302
  %244 = bitcast {}* %17 to i64**
  %245 = load i64*, i64** %244, align 8
  %246 = bitcast {}* %0 to i32**
  %247 = load i32*, i32** %246, align 8
  %min.iters.check286 = icmp ult i32 %narrow71, 16
  br i1 %min.iters.check286, label %scalar.ph284, label %vector.memcheck275

vector.memcheck275:                               ; preds = %L320.preheader
  %scevgep276 = getelementptr i32, i32* %247, i64 %.54
  %scevgep278 = getelementptr i64, i64* %245, i64 %.54
  %248 = bitcast i64* %scevgep278 to i32*
  %bound0280 = icmp ult i32* %247, %248
  %249 = bitcast i32* %scevgep276 to i64*
  %bound1281 = icmp ult i64* %245, %249
  %found.conflict282 = and i1 %bound0280, %bound1281
  br i1 %found.conflict282, label %scalar.ph284, label %vector.ph287

vector.ph287:                                     ; preds = %vector.memcheck275
  %n.vec289 = and i64 %.54, 2147483632
  %ind.end291 = or i64 %n.vec289, 1
  br label %vector.body285

vector.body285:                                   ; preds = %vector.body285, %vector.ph287
  %index293 = phi i64 [ 0, %vector.ph287 ], [ %index.next299, %vector.body285 ]
  %250 = getelementptr inbounds i64, i64* %245, i64 %index293
  %251 = bitcast i64* %250 to <4 x i64>*
  %wide.load295 = load <4 x i64>, <4 x i64>* %251, align 8
  %252 = getelementptr inbounds i64, i64* %250, i64 4
  %253 = bitcast i64* %252 to <4 x i64>*
  %wide.load296 = load <4 x i64>, <4 x i64>* %253, align 8
  %254 = getelementptr inbounds i64, i64* %250, i64 8
  %255 = bitcast i64* %254 to <4 x i64>*
  %wide.load297 = load <4 x i64>, <4 x i64>* %255, align 8
  %256 = getelementptr inbounds i64, i64* %250, i64 12
  %257 = bitcast i64* %256 to <4 x i64>*
  %wide.load298 = load <4 x i64>, <4 x i64>* %257, align 8
  %258 = trunc <4 x i64> %wide.load295 to <4 x i32>
  %259 = trunc <4 x i64> %wide.load296 to <4 x i32>
  %260 = trunc <4 x i64> %wide.load297 to <4 x i32>
  %261 = trunc <4 x i64> %wide.load298 to <4 x i32>
  %262 = getelementptr inbounds i32, i32* %247, i64 %index293
  %263 = bitcast i32* %262 to <4 x i32>*
  store <4 x i32> %258, <4 x i32>* %263, align 4
  %264 = getelementptr inbounds i32, i32* %262, i64 4
  %265 = bitcast i32* %264 to <4 x i32>*
  store <4 x i32> %259, <4 x i32>* %265, align 4
  %266 = getelementptr inbounds i32, i32* %262, i64 8
  %267 = bitcast i32* %266 to <4 x i32>*
  store <4 x i32> %260, <4 x i32>* %267, align 4
  %268 = getelementptr inbounds i32, i32* %262, i64 12
  %269 = bitcast i32* %268 to <4 x i32>*
  store <4 x i32> %261, <4 x i32>* %269, align 4
  %index.next299 = add nuw i64 %index293, 16
  %270 = icmp eq i64 %index.next299, %n.vec289
  br i1 %270, label %middle.block283, label %vector.body285

middle.block283:                                  ; preds = %vector.body285
  %cmp.n292 = icmp eq i64 %n.vec289, %.54
  br i1 %cmp.n292, label %L337, label %scalar.ph284

scalar.ph284:                                     ; preds = %middle.block283, %vector.memcheck275, %L320.preheader
  %bc.resume.val290 = phi i64 [ %ind.end291, %middle.block283 ], [ 1, %L320.preheader ], [ 1, %vector.memcheck275 ]
  br label %L320

L320:                                             ; preds = %L320, %scalar.ph284
  %value_phi35 = phi i64 [ %276, %L320 ], [ %bc.resume.val290, %scalar.ph284 ]
  %271 = add nsw i64 %value_phi35, -1
  %272 = getelementptr inbounds i64, i64* %245, i64 %271
  %273 = load i64, i64* %272, align 8
  %274 = trunc i64 %273 to i32
  %275 = getelementptr inbounds i32, i32* %247, i64 %271
  store i32 %274, i32* %275, align 4
  %.not72.not = icmp eq i64 %value_phi35, %.54
  %276 = add nuw nsw i64 %value_phi35, 1
  br i1 %.not72.not, label %L337, label %L320

L337:                                             ; preds = %L320, %middle.block283, %L302, %L258, %L258.us97, %L258.us, %L258.us.us, %middle.block258, %middle.block230, %middle.block205, %middle.block179, %L240
  %value_phi989 = phi i32 [ %value_phi990, %L302 ], [ %value_phi9, %L240 ], [ %value_phi990, %L320 ], [ %value_phi990, %middle.block283 ], [ %value_phi9, %L258.us.us ], [ %value_phi9, %middle.block258 ], [ %value_phi9, %L258.us ], [ %value_phi9, %middle.block230 ], [ %value_phi9, %L258.us97 ], [ %value_phi9, %middle.block205 ], [ %value_phi9, %L258 ], [ %value_phi9, %middle.block179 ]
  %.not64 = icmp eq i32 %value_phi989, -1
  br i1 %.not64, label %L340, label %L384.thread115

L340:                                             ; preds = %L337
  %277 = icmp sgt i32 %3, %2
  %value_phi20.v66 = select i1 %277, i32 %3, i32 %2
  %278 = sext i32 %value_phi20.v66 to i64
  %value_phi20 = add nsw i64 %278, -1
  br i1 %277, label %L361.preheader, label %L384.thread

L361.preheader:                                   ; preds = %L340
  %279 = bitcast {}* %0 to i32**
  %280 = load i32*, i32** %279, align 8
  br label %L361

L361:                                             ; preds = %L372, %L361.preheader
  %value_phi24 = phi i64 [ %283, %L372 ], [ %18, %L361.preheader ]
  %281 = getelementptr inbounds i32, i32* %280, i64 %value_phi24
  %282 = load i32, i32* %281, align 4
  %.not68 = icmp eq i32 %282, 0
  br i1 %.not68, label %L372, label %L384

L372:                                             ; preds = %L361
  %.not70.not = icmp eq i64 %value_phi24, %value_phi20
  %283 = add i64 %value_phi24, 1
  br i1 %.not70.not, label %L384.thread, label %L361

L384:                                             ; preds = %L361
  %284 = trunc i64 %value_phi24 to i32
  %.not69 = icmp eq i32 %284, -1
  br i1 %.not69, label %L384.thread, label %L384.thread115

L384.thread:                                      ; preds = %L384, %L372, %L340
  br label %L384.thread115

L384.thread115:                                   ; preds = %L384.thread, %L384, %L337
  %285 = phi i32 [ %3, %L384.thread ], [ %284, %L384 ], [ %value_phi989, %L337 ]
  %286 = load {}*, {}** %11, align 8
  %287 = bitcast {}*** %pgcstack to {}**
  store {}* %286, {}** %287, align 8
  ret i32 %285

fail:                                             ; preds = %L77
  call void @ijl_throw({}* inttoptr (i64 139663434559888 to {}*))
  unreachable

pass:                                             ; preds = %L77
  %288 = bitcast {}* %56 to { i8*, i64, i16, i16, i32 }*
  %289 = getelementptr inbounds { i8*, i64, i16, i16, i32 }, { i8*, i64, i16, i16, i32 }* %288, i64 0, i32 1
  %290 = load i64, i64* %289, align 8
  %.not77 = icmp eq i64 %290, 0
  br i1 %.not77, label %L221, label %pass46

pass46:                                           ; preds = %pass
  %291 = sub i64 %36, %52
  %292 = bitcast {}* %56 to i32**
  %293 = load i32*, i32** %292, align 8
  %294 = getelementptr inbounds i32, i32* %293, i64 %value_phi5
  %295 = load i32, i32* %294, align 4
  %296 = getelementptr inbounds [4 x {}*], [4 x {}*]* %gcframe302, i64 0, i64 3
  store {}* %17, {}** %296, align 8
  %297 = call i32 @j_invmod_11363(i32 zeroext %295, i32 zeroext %5) #0
  %298 = zext i32 %297 to i64
  %299 = mul i64 %291, %298
  %300 = zext i64 %299 to i128
  %301 = mul nuw i128 %300, %25
  %302 = lshr i128 %301, 64
  %303 = trunc i128 %302 to i64
  %304 = sub i64 %299, %303
  %305 = lshr i64 %304, 1
  %306 = select i1 %.not73, i64 0, i64 %305
  %307 = add i64 %306, %303
  %308 = lshr i64 %307, %32
  %309 = select i1 %30, i64 0, i64 %308
  %310 = mul i64 %309, %34
  %311 = sub i64 %299, %310
  %312 = load {}**, {}*** %35, align 8
  %313 = getelementptr inbounds {}*, {}** %312, i64 %53
  %314 = load {}*, {}** %313, align 8
  %.not80 = icmp eq {}* %314, null
  br i1 %.not80, label %fail47, label %pass48

fail47:                                           ; preds = %pass46
  call void @ijl_throw({}* inttoptr (i64 139663434559888 to {}*))
  unreachable

pass48:                                           ; preds = %pass46
  %315 = load i64, i64* %38, align 8
  %.not81 = icmp eq i64 %315, 0
  br i1 %.not81, label %L155.thread110, label %L132.lr.ph

L132.lr.ph:                                       ; preds = %pass48
  %316 = load i64*, i64** %22, align 8
  %317 = and i64 %311, 4294967295
  %318 = bitcast {}* %314 to i32**
  %319 = load i32*, i32** %318, align 8
  %min.iters.check152 = icmp ult i64 %315, 16
  br i1 %min.iters.check152, label %scalar.ph150, label %vector.ph153

vector.ph153:                                     ; preds = %L132.lr.ph
  %n.vec155 = and i64 %315, 9223372036854775792
  %broadcast.splatinsert167 = insertelement <4 x i64> poison, i64 %317, i64 0
  %broadcast.splat168 = shufflevector <4 x i64> %broadcast.splatinsert167, <4 x i64> poison, <4 x i32> zeroinitializer
  br label %vector.body151

vector.body151:                                   ; preds = %vector.body151, %vector.ph153
  %index158 = phi i64 [ 0, %vector.ph153 ], [ %index.next175, %vector.body151 ]
  %320 = getelementptr inbounds i64, i64* %316, i64 %index158
  %321 = bitcast i64* %320 to <4 x i64>*
  %wide.load159 = load <4 x i64>, <4 x i64>* %321, align 8
  %322 = getelementptr inbounds i64, i64* %320, i64 4
  %323 = bitcast i64* %322 to <4 x i64>*
  %wide.load160 = load <4 x i64>, <4 x i64>* %323, align 8
  %324 = getelementptr inbounds i64, i64* %320, i64 8
  %325 = bitcast i64* %324 to <4 x i64>*
  %wide.load161 = load <4 x i64>, <4 x i64>* %325, align 8
  %326 = getelementptr inbounds i64, i64* %320, i64 12
  %327 = bitcast i64* %326 to <4 x i64>*
  %wide.load162 = load <4 x i64>, <4 x i64>* %327, align 8
  %328 = getelementptr inbounds i32, i32* %319, i64 %index158
  %329 = bitcast i32* %328 to <4 x i32>*
  %wide.load163 = load <4 x i32>, <4 x i32>* %329, align 4
  %330 = getelementptr inbounds i32, i32* %328, i64 4
  %331 = bitcast i32* %330 to <4 x i32>*
  %wide.load164 = load <4 x i32>, <4 x i32>* %331, align 4
  %332 = getelementptr inbounds i32, i32* %328, i64 8
  %333 = bitcast i32* %332 to <4 x i32>*
  %wide.load165 = load <4 x i32>, <4 x i32>* %333, align 4
  %334 = getelementptr inbounds i32, i32* %328, i64 12
  %335 = bitcast i32* %334 to <4 x i32>*
  %wide.load166 = load <4 x i32>, <4 x i32>* %335, align 4
  %336 = zext <4 x i32> %wide.load163 to <4 x i64>
  %337 = zext <4 x i32> %wide.load164 to <4 x i64>
  %338 = zext <4 x i32> %wide.load165 to <4 x i64>
  %339 = zext <4 x i32> %wide.load166 to <4 x i64>
  %340 = mul nuw <4 x i64> %broadcast.splat168, %336
  %341 = mul nuw <4 x i64> %broadcast.splat168, %337
  %342 = mul nuw <4 x i64> %broadcast.splat168, %338
  %343 = mul nuw <4 x i64> %broadcast.splat168, %339
  %344 = add <4 x i64> %340, %wide.load159
  %345 = add <4 x i64> %341, %wide.load160
  %346 = add <4 x i64> %342, %wide.load161
  %347 = add <4 x i64> %343, %wide.load162
  store <4 x i64> %344, <4 x i64>* %321, align 8
  store <4 x i64> %345, <4 x i64>* %323, align 8
  store <4 x i64> %346, <4 x i64>* %325, align 8
  store <4 x i64> %347, <4 x i64>* %327, align 8
  %index.next175 = add nuw i64 %index158, 16
  %348 = icmp eq i64 %index.next175, %n.vec155
  br i1 %348, label %middle.block149, label %vector.body151

middle.block149:                                  ; preds = %vector.body151
  %cmp.n157 = icmp eq i64 %315, %n.vec155
  br i1 %cmp.n157, label %L155, label %scalar.ph150

scalar.ph150:                                     ; preds = %middle.block149, %L132.lr.ph
  %bc.resume.val156 = phi i64 [ %n.vec155, %middle.block149 ], [ 0, %L132.lr.ph ]
  br label %L132
}

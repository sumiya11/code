	.text
	.file	"_mul_var_quo_UInt32"
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3                               # -- Begin function julia__mul_var_quo_UInt32_13498
.LCPI0_0:
	.quad	0xbfe62e42fefa39ef              # double -0.69314718055994529
.LCPI0_1:
	.quad	0x404f800000000000              # double 63
.LCPI0_2:
	.quad	0x4000000000000000              # double 2
.LCPI0_3:
	.quad	0xc1e0000000000000              # double -2147483648
.LCPI0_4:
	.quad	0x41dfffffffc00000              # double 2147483647
	.text
	.globl	julia__mul_var_quo_UInt32_13498
	.p2align	4, 0x90
	.type	julia__mul_var_quo_UInt32_13498,@function
julia__mul_var_quo_UInt32_13498:        # @julia__mul_var_quo_UInt32_13498
	.cfi_startproc
# %bb.0:                                # %top
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	andq	$-32, %rsp
	subq	$224, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r9, 64(%rsp)                   # 8-byte Spill
	movq	%r8, %rbx
	movl	%ecx, 72(%rsp)                  # 4-byte Spill
	movq	%rsi, 112(%rsp)                 # 8-byte Spill
	movq	%rdi, %r15
	movl	16(%rbp), %ecx
	vxorpd	%xmm0, %xmm0, %xmm0
	vmovupd	%ymm0, 144(%rsp)
	vmovapd	%ymm0, 128(%rsp)
	movabsq	$139663350968928, %r14          # imm = 0x7F05E86C3260
	#APP
	movq	%fs:0, %rax
	#NO_APP
	movq	-8(%rax), %r13
	movq	$16, 128(%rsp)
	movq	(%r13), %rax
	movq	%rax, 136(%rsp)
	leaq	128(%rsp), %rax
	movq	%rax, (%r13)
	movq	%rdx, 56(%rsp)                  # 8-byte Spill
	movq	8(%rdx), %rax
	movq	%rax, 32(%rsp)                  # 8-byte Spill
	leaq	-1(%rcx), %rax
	vcvtsi2sd	%rax, %xmm1, %xmm0
	movabsq	$j__log_13500, %rax
	movabsq	$139663579224176, %rdi          # imm = 0x7F05F6071870
	vzeroupper
	callq	*%rax
	vaddsd	%xmm0, %xmm0, %xmm0
	movabsq	$.LCPI0_0, %rax
	vdivsd	(%rax), %xmm0, %xmm0
	movabsq	$.LCPI0_1, %rax
	vaddsd	(%rax), %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm1
	movabsq	$"j_^_13501", %rax
	movabsq	$.LCPI0_2, %rcx
	vmovsd	(%rcx), %xmm0                   # xmm0 = mem[0],zero
	callq	*%rax
	movabsq	$.LCPI0_3, %rax
	vucomisd	(%rax), %xmm0
	vmovsd	%xmm0, 48(%rsp)                 # 8-byte Spill
	jb	.LBB0_53
# %bb.1:                                # %top
	movabsq	$.LCPI0_4, %rax
	vmovsd	(%rax), %xmm1                   # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jb	.LBB0_53
# %bb.2:                                # %top
	vroundsd	$11, %xmm0, %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jne	.LBB0_53
	jp	.LBB0_53
# %bb.3:                                # %L21
	addq	$326464352, %r14                # imm = 0x13757360
	movabsq	$139663435712336, %rdi          # imm = 0x7F05ED794750
	movq	32(%rsp), %rsi                  # 8-byte Reload
	callq	*%r14
	movq	8(%rax), %r12
	testq	%r12, %r12
	je	.LBB0_5
# %bb.4:                                # %L39.preheader
	movq	(%rax), %rdi
	leaq	(,%r12,8), %rdx
	movabsq	$memset, %rcx
	xorl	%esi, %esi
	movq	%rbx, %r14
	movq	%rax, %rbx
	callq	*%rcx
	movq	%rbx, %rax
	movq	%r14, %rbx
.LBB0_5:                                # %L56
	movq	24(%rbp), %rdx
	movq	32(%rsp), %rsi                  # 8-byte Reload
	testq	%rsi, %rsi
	vmovsd	48(%rsp), %xmm0                 # 8-byte Reload
                                        # xmm0 = mem[0],zero
	je	.LBB0_6
# %bb.7:                                # %L72.preheader
	movq	%rax, 40(%rsp)                  # 8-byte Spill
	movq	%r15, 88(%rsp)                  # 8-byte Spill
	movq	%r13, 96(%rsp)                  # 8-byte Spill
	vcvttsd2si	%xmm0, %eax
	movq	56(%rsp), %rcx                  # 8-byte Reload
	movq	(%rcx), %rcx
	movq	%rcx, 48(%rsp)                  # 8-byte Spill
	movslq	72(%rsp), %rcx                  # 4-byte Folded Reload
	movq	%rcx, 72(%rsp)                  # 8-byte Spill
	movq	64(%rsp), %rcx                  # 8-byte Reload
	movq	(%rcx), %rcx
	movq	%rcx, 64(%rsp)                  # 8-byte Spill
	movq	(%rbx), %rcx
	movq	%rcx, 56(%rsp)                  # 8-byte Spill
	movl	%eax, 84(%rsp)                  # 4-byte Spill
	cltq
	movq	%rax, 120(%rsp)                 # 8-byte Spill
	movq	(%rdx), %r9
	movq	16(%rdx), %r8
	movb	24(%rdx), %al
	movb	%al, 31(%rsp)                   # 1-byte Spill
	movzbl	8(%rdx), %r10d
	movq	%r12, %rax
	andq	$-4, %rax
	movq	%rax, 104(%rsp)                 # 8-byte Spill
	movl	$1, %r13d
	vmovq	%r10, %xmm0
	vpbroadcastq	%xmm0, %ymm0
	vmovq	%r8, %xmm1
	vpbroadcastq	%xmm1, %ymm1
	vpsrlq	$32, %ymm1, %ymm2
	movq	%r12, %r15
	jmp	.LBB0_8
.LBB0_16:                               #   in Loop: Header=BB0_8 Depth=1
	xorl	%r15d, %r15d
	.p2align	4, 0x90
.LBB0_34:                               # %L238
                                        #   in Loop: Header=BB0_8 Depth=1
	leaq	1(%r13), %rax
	cmpq	%rsi, %r13
	movq	%rax, %r13
	je	.LBB0_35
.LBB0_8:                                # %L72
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB0_43 Depth 2
                                        #     Child Loop BB0_11 Depth 2
                                        #     Child Loop BB0_22 Depth 2
                                        #     Child Loop BB0_24 Depth 2
                                        #     Child Loop BB0_30 Depth 2
                                        #     Child Loop BB0_32 Depth 2
	movq	48(%rsp), %rax                  # 8-byte Reload
	movl	-4(%rax,%r13,4), %edx
	testq	%rdx, %rdx
	je	.LBB0_34
# %bb.9:                                # %L78
                                        #   in Loop: Header=BB0_8 Depth=1
	movq	72(%rsp), %rax                  # 8-byte Reload
	movq	64(%rsp), %rcx                  # 8-byte Reload
	movq	-8(%rcx,%rax,8), %rax
	testq	%rax, %rax
	je	.LBB0_10
# %bb.37:                               # %pass
                                        #   in Loop: Header=BB0_8 Depth=1
	movq	(%rax), %rax
	movslq	-4(%rax,%r13,4), %rax
	movq	56(%rsp), %rcx                  # 8-byte Reload
	movq	-8(%rcx,%rax,8), %rcx
	testq	%rcx, %rcx
	je	.LBB0_54
# %bb.38:                               # %pass20
                                        #   in Loop: Header=BB0_8 Depth=1
	movq	8(%rcx), %rax
	cmpq	$2, %rax
	jae	.LBB0_39
# %bb.50:                               # %pass33
                                        #   in Loop: Header=BB0_8 Depth=1
	cmpq	$1, %rax
	jne	.LBB0_51
# %bb.52:                               # %pass37
                                        #   in Loop: Header=BB0_8 Depth=1
	movq	(%rcx), %rax
	movl	(%rax), %eax
	movq	40(%rsp), %rcx                  # 8-byte Reload
	movq	(%rcx), %rcx
	addq	-8(%rcx,%rax,8), %rdx
	mulxq	%r9, %rsi, %rsi
	movq	%rdx, %rdi
	subq	%rsi, %rdi
	shrq	%rdi
	cmpb	$0, 31(%rsp)                    # 1-byte Folded Reload
	movl	$0, %ebx
	cmoveq	%rbx, %rdi
	addq	%rsi, %rdi
	shrxq	%r10, %rdi, %rsi
	imulq	%r8, %rsi
	subq	%rsi, %rdx
	movq	32(%rsp), %rsi                  # 8-byte Reload
	movq	%rdx, -8(%rcx,%rax,8)
	jmp	.LBB0_34
	.p2align	4, 0x90
.LBB0_39:                               # %pass24
                                        #   in Loop: Header=BB0_8 Depth=1
	testq	%r15, %r15
	je	.LBB0_12
# %bb.40:                               # %L103.lr.ph
                                        #   in Loop: Header=BB0_8 Depth=1
	movq	40(%rsp), %rax                  # 8-byte Reload
	movq	(%rax), %rax
	movq	(%rcx), %rbx
	cmpq	$16, %r15
	jae	.LBB0_42
# %bb.41:                               #   in Loop: Header=BB0_8 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB0_11
.LBB0_42:                               # %vector.ph114
                                        #   in Loop: Header=BB0_8 Depth=1
	movq	%r15, %rcx
	andq	$-16, %rcx
	vmovq	%rdx, %xmm3
	vpbroadcastq	%xmm3, %ymm3
	xorl	%edi, %edi
	.p2align	4, 0x90
.LBB0_43:                               # %vector.body112
                                        #   Parent Loop BB0_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vpmovzxdq	(%rbx,%rdi,4), %ymm4    # ymm4 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
	vpmovzxdq	16(%rbx,%rdi,4), %ymm5  # ymm5 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
	vpmovzxdq	32(%rbx,%rdi,4), %ymm6  # ymm6 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
	vpmovzxdq	48(%rbx,%rdi,4), %ymm7  # ymm7 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
	vpmuludq	%ymm4, %ymm3, %ymm4
	vpmuludq	%ymm5, %ymm3, %ymm5
	vpmuludq	%ymm6, %ymm3, %ymm6
	vpmuludq	%ymm7, %ymm3, %ymm7
	vpaddq	(%rax,%rdi,8), %ymm4, %ymm4
	vpaddq	32(%rax,%rdi,8), %ymm5, %ymm5
	vpaddq	64(%rax,%rdi,8), %ymm6, %ymm6
	vpaddq	96(%rax,%rdi,8), %ymm7, %ymm7
	vmovdqu	%ymm4, (%rax,%rdi,8)
	vmovdqu	%ymm5, 32(%rax,%rdi,8)
	vmovdqu	%ymm6, 64(%rax,%rdi,8)
	vmovdqu	%ymm7, 96(%rax,%rdi,8)
	addq	$16, %rdi
	cmpq	%rdi, %rcx
	jne	.LBB0_43
# %bb.44:                               # %middle.block110
                                        #   in Loop: Header=BB0_8 Depth=1
	cmpq	%rcx, %r15
	je	.LBB0_12
	.p2align	4, 0x90
.LBB0_11:                               # %L103
                                        #   Parent Loop BB0_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	(%rbx,%rcx,4), %edi
	imulq	%rdx, %rdi
	addq	%rdi, (%rax,%rcx,8)
	incq	%rcx
	cmpq	%rcx, %r15
	jne	.LBB0_11
.LBB0_12:                               # %L126
                                        #   in Loop: Header=BB0_8 Depth=1
	movq	120(%rsp), %rcx                 # 8-byte Reload
	cmpq	$-1, %rcx
	je	.LBB0_15
# %bb.13:                               # %L126
                                        #   in Loop: Header=BB0_8 Depth=1
	testq	%rcx, %rcx
	je	.LBB0_14
# %bb.45:                               # %after_srem
                                        #   in Loop: Header=BB0_8 Depth=1
	movq	%r13, %rax
	orq	%rcx, %rax
	shrq	$32, %rax
	je	.LBB0_46
# %bb.47:                               #   in Loop: Header=BB0_8 Depth=1
	movq	%r13, %rax
	cqto
	idivq	%rcx
	jmp	.LBB0_48
.LBB0_15:                               # %L130
                                        #   in Loop: Header=BB0_8 Depth=1
	testq	%r12, %r12
	jne	.LBB0_17
	jmp	.LBB0_16
.LBB0_46:                               #   in Loop: Header=BB0_8 Depth=1
	movl	%r13d, %eax
	xorl	%edx, %edx
	divl	84(%rsp)                        # 4-byte Folded Reload
                                        # kill: def $edx killed $edx def $rdx
.LBB0_48:                               #   in Loop: Header=BB0_8 Depth=1
	testq	%rdx, %rdx
	cmoveq	%rdx, %r15
	jne	.LBB0_34
# %bb.49:                               #   in Loop: Header=BB0_8 Depth=1
	testq	%r12, %r12
	je	.LBB0_34
.LBB0_17:                               # %L141.lr.ph
                                        #   in Loop: Header=BB0_8 Depth=1
	movq	40(%rsp), %rax                  # 8-byte Reload
	movq	(%rax), %r11
	cmpb	$0, 31(%rsp)                    # 1-byte Folded Reload
	je	.LBB0_26
# %bb.18:                               # %L141.lr.ph.L141.lr.ph.split_crit_edge
                                        #   in Loop: Header=BB0_8 Depth=1
	movq	%r12, %r15
	cmpb	$63, %r10b
	ja	.LBB0_34
# %bb.19:                               # %L141.preheader
                                        #   in Loop: Header=BB0_8 Depth=1
	cmpq	$4, %r12
	jae	.LBB0_21
# %bb.20:                               #   in Loop: Header=BB0_8 Depth=1
	xorl	%r14d, %r14d
	jmp	.LBB0_24
.LBB0_26:                               # %L141.lr.ph.split.us
                                        #   in Loop: Header=BB0_8 Depth=1
	movq	%r12, %r15
	cmpb	$63, %r10b
	ja	.LBB0_34
# %bb.27:                               # %L141.us.preheader
                                        #   in Loop: Header=BB0_8 Depth=1
	cmpq	$4, %r12
	jae	.LBB0_29
# %bb.28:                               #   in Loop: Header=BB0_8 Depth=1
	xorl	%ebx, %ebx
	jmp	.LBB0_32
.LBB0_21:                               # %vector.ph96
                                        #   in Loop: Header=BB0_8 Depth=1
	movq	%r12, %r14
	movabsq	$9223372036854775804, %rax      # imm = 0x7FFFFFFFFFFFFFFC
	andq	%rax, %r14
	xorl	%ecx, %ecx
	movq	104(%rsp), %r15                 # 8-byte Reload
	.p2align	4, 0x90
.LBB0_22:                               # %vector.body94
                                        #   Parent Loop BB0_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vmovdqu	(%r11,%rcx,8), %xmm3
	vmovdqu	16(%r11,%rcx,8), %xmm4
	vpextrq	$1, %xmm3, %rdi
	vmovq	%xmm3, %rbx
	vmovq	%xmm4, %rsi
	vpextrq	$1, %xmm4, %rax
	movq	%r9, %rdx
	mulxq	%rax, %rax, %rax
	mulxq	%rsi, %rsi, %rsi
	mulxq	%rbx, %rbx, %rbx
	mulxq	%rdi, %rdx, %rdx
	vmovdqu	(%r11,%rcx,8), %ymm3
	vmovq	%rdx, %xmm4
	vmovq	%rbx, %xmm5
	vpunpcklqdq	%xmm4, %xmm5, %xmm4     # xmm4 = xmm5[0],xmm4[0]
	vmovq	%rsi, %xmm5
	vmovq	%rax, %xmm6
	vpunpcklqdq	%xmm6, %xmm5, %xmm5     # xmm5 = xmm5[0],xmm6[0]
	vinserti128	$1, %xmm5, %ymm4, %ymm4
	vpsubq	%ymm4, %ymm3, %ymm5
	vpsrlq	$1, %ymm5, %ymm5
	vpaddq	%ymm4, %ymm5, %ymm4
	vpsrlvq	%ymm0, %ymm4, %ymm4
	vpmuludq	%ymm2, %ymm4, %ymm5
	vpsrlq	$32, %ymm4, %ymm6
	vpmuludq	%ymm1, %ymm6, %ymm6
	vpaddq	%ymm6, %ymm5, %ymm5
	vpsllq	$32, %ymm5, %ymm5
	vpmuludq	%ymm1, %ymm4, %ymm4
	vpaddq	%ymm5, %ymm4, %ymm4
	vpsubq	%ymm4, %ymm3, %ymm3
	vmovdqu	%ymm3, (%r11,%rcx,8)
	addq	$4, %rcx
	cmpq	%rcx, %r15
	jne	.LBB0_22
# %bb.23:                               # %middle.block92
                                        #   in Loop: Header=BB0_8 Depth=1
	movq	%r12, %r15
	cmpq	%r14, %r12
	movq	32(%rsp), %rsi                  # 8-byte Reload
	je	.LBB0_34
	.p2align	4, 0x90
.LBB0_24:                               # %L141
                                        #   Parent Loop BB0_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%r11,%r14,8), %rax
	movq	%r9, %rdx
	mulxq	%rax, %rcx, %rcx
	movq	%rax, %rdx
	subq	%rcx, %rdx
	shrq	%rdx
	addq	%rcx, %rdx
	shrxq	%r10, %rdx, %rcx
	imulq	%r8, %rcx
	subq	%rcx, %rax
	movq	%rax, (%r11,%r14,8)
	incq	%r14
	cmpq	%r14, %r12
	jne	.LBB0_24
# %bb.25:                               #   in Loop: Header=BB0_8 Depth=1
	movq	%r12, %r15
	jmp	.LBB0_34
.LBB0_29:                               # %vector.ph
                                        #   in Loop: Header=BB0_8 Depth=1
	movq	%r12, %rbx
	movabsq	$9223372036854775804, %rax      # imm = 0x7FFFFFFFFFFFFFFC
	andq	%rax, %rbx
	xorl	%ecx, %ecx
	movq	104(%rsp), %r15                 # 8-byte Reload
	.p2align	4, 0x90
.LBB0_30:                               # %vector.body
                                        #   Parent Loop BB0_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vmovdqu	(%r11,%rcx,8), %ymm3
	vmovdqu	(%r11,%rcx,8), %xmm4
	vmovdqu	16(%r11,%rcx,8), %xmm5
	vpextrq	$1, %xmm4, %r14
	vmovq	%xmm4, %rsi
	vmovq	%xmm5, %rdi
	vpextrq	$1, %xmm5, %rax
	movq	%r9, %rdx
	mulxq	%rax, %rax, %rax
	mulxq	%rdi, %rdi, %rdi
	mulxq	%rsi, %rsi, %rsi
	mulxq	%r14, %rdx, %rdx
	vmovq	%rdx, %xmm4
	vmovq	%rsi, %xmm5
	vpunpcklqdq	%xmm4, %xmm5, %xmm4     # xmm4 = xmm5[0],xmm4[0]
	vmovq	%rdi, %xmm5
	vmovq	%rax, %xmm6
	vpunpcklqdq	%xmm6, %xmm5, %xmm5     # xmm5 = xmm5[0],xmm6[0]
	vinserti128	$1, %xmm5, %ymm4, %ymm4
	vpsrlvq	%ymm0, %ymm4, %ymm4
	vpmuludq	%ymm2, %ymm4, %ymm5
	vpsrlq	$32, %ymm4, %ymm6
	vpmuludq	%ymm1, %ymm6, %ymm6
	vpaddq	%ymm6, %ymm5, %ymm5
	vpsllq	$32, %ymm5, %ymm5
	vpmuludq	%ymm1, %ymm4, %ymm4
	vpaddq	%ymm5, %ymm4, %ymm4
	vpsubq	%ymm4, %ymm3, %ymm3
	vmovdqu	%ymm3, (%r11,%rcx,8)
	addq	$4, %rcx
	cmpq	%rcx, %r15
	jne	.LBB0_30
# %bb.31:                               # %middle.block
                                        #   in Loop: Header=BB0_8 Depth=1
	movq	%r12, %r15
	cmpq	%rbx, %r12
	movq	32(%rsp), %rsi                  # 8-byte Reload
	je	.LBB0_34
	.p2align	4, 0x90
.LBB0_32:                               # %L141.us
                                        #   Parent Loop BB0_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%r11,%rbx,8), %rax
	movq	%r9, %rdx
	mulxq	%rax, %rcx, %rcx
	shrxq	%r10, %rcx, %rcx
	imulq	%r8, %rcx
	subq	%rcx, %rax
	movq	%rax, (%r11,%rbx,8)
	incq	%rbx
	cmpq	%rbx, %r12
	jne	.LBB0_32
# %bb.33:                               #   in Loop: Header=BB0_8 Depth=1
	movq	%r12, %r15
	jmp	.LBB0_34
.LBB0_35:
	movq	96(%rsp), %r13                  # 8-byte Reload
	movq	88(%rsp), %r15                  # 8-byte Reload
	movq	40(%rsp), %rax                  # 8-byte Reload
	movb	$1, %bl
	movq	24(%rbp), %rdx
	jmp	.LBB0_36
.LBB0_6:
	movb	$1, %bl
	jmp	.LBB0_36
.LBB0_51:
	xorl	%ebx, %ebx
	movq	96(%rsp), %r13                  # 8-byte Reload
	movq	88(%rsp), %r15                  # 8-byte Reload
	movq	40(%rsp), %rax                  # 8-byte Reload
	movq	24(%rbp), %rdx
.LBB0_36:                               # %L249
	movq	%rax, 168(%rsp)
	movabsq	$j_reduce_mod_13502, %rcx
	movq	%rax, %rdi
	movl	16(%rbp), %esi
                                        # kill: def $esi killed $esi killed $rsi
	vzeroupper
	callq	*%rcx
	movq	112(%rsp), %rcx                 # 8-byte Reload
	movq	%rax, (%rcx)
	movq	%rax, 8(%r15)
	movb	%bl, (%r15)
	movq	136(%rsp), %rax
	movq	%rax, (%r13)
	movq	%r15, %rax
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_10:                               # %fail
	.cfi_def_cfa %rbp, 16
	movabsq	$ijl_throw, %rax
	movabsq	$139663434559888, %rdi          # imm = 0x7F05ED67B190
	vzeroupper
	callq	*%rax
.LBB0_54:                               # %fail19
	movabsq	$ijl_throw, %rax
	movabsq	$139663434559888, %rdi          # imm = 0x7F05ED67B190
	vzeroupper
	callq	*%rax
.LBB0_14:                               # %fail26
	movabsq	$ijl_throw, %rax
	movabsq	$139663434560176, %rdi          # imm = 0x7F05ED67B2B0
	vzeroupper
	callq	*%rax
.LBB0_53:                               # %L23
	leaq	144(%rsp), %r12
	movq	16(%r13), %rdi
	movabsq	$ijl_gc_pool_alloc, %r15
	movl	$1392, %esi                     # imm = 0x570
	movl	$16, %edx
	callq	*%r15
	leaq	84740880(%r14), %rcx
	movq	%rcx, -8(%rax)
	vmovsd	48(%rsp), %xmm0                 # 8-byte Reload
                                        # xmm0 = mem[0],zero
	vmovsd	%xmm0, (%rax)
	movq	%rax, 168(%rsp)
	movabsq	$j_InexactError_13506, %r8
	movabsq	$139663578904240, %rsi          # imm = 0x7F05F60236B0
	movabsq	$139663435712160, %rdx          # imm = 0x7F05ED7946A0
	movq	%r12, %rdi
	movq	%rax, %rcx
	callq	*%r8
	movq	16(%r13), %rdi
	movl	$1440, %esi                     # imm = 0x5A0
	movl	$32, %edx
	callq	*%r15
	movq	%r14, -8(%rax)
	movq	16(%r12), %rcx
	movq	%rcx, 16(%rax)
	vmovups	(%r12), %xmm0
	vmovups	%xmm0, (%rax)
	movabsq	$ijl_throw, %rcx
	movq	%rax, %rdi
	callq	*%rcx
.Lfunc_end0:
	.size	julia__mul_var_quo_UInt32_13498, .Lfunc_end0-julia__mul_var_quo_UInt32_13498
	.cfi_endproc
                                        # -- End function
	.type	.L_j_const1,@object             # @_j_const1
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3
.L_j_const1:
	.quad	0                               # 0x0
	.size	.L_j_const1, 8

	.section	".note.GNU-stack","",@progbits
